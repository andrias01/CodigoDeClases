#Esta función recibe una lista y devolverá una lista con todas sus permutaciones posibles.
def permutacionesFuntion(lista):
    #Si la lista que entra es vacia retorna vacio
    if len(lista) == 0:
        return [[]]

    #declaro variable del arreglo donde guardare la lista
    resultado = []
    #Len(lista) es la longitud de la lista para repetir en el primer bucle
    #Este for recorre cada elemento de la lista. Cada iteración tomará un elemento como "fijo" y generará las permutaciones del resto.
    # Por ejemplo, si lista = [1,2,3], el bucle hace:
    # i = 0: Elige 1 como fijo, permuta [2,3]
    # i = 1: Elige 2 como fijo, permuta [1,3]
    # i = 2: Elige 3 como fijo, permuta [1,2]
    for i in range(len(lista)):  # Ciclo para elegir un elemento como "fijo"
        #lista[:i] Toma todos los elementos desde el inicio hasta el índice i (sin incluir i).
        #lista[i+1:] Toma todos los elementos desde el índice i+1 hasta el final.
        resto = lista[:i] + lista[i+1:]  # Lista sin el elemento actual
        for perm in permutacionesFuntion(resto):  # Llamada recursiva para permutar el resto
            #Aquí se llama recursivamente a permutacionesFuntion(resto) para calcular todas las permutaciones posibles del "resto".
            #Por ejemplo, cuando resto = [2,3], la recursión generará [[2,3], [3,2]].
            resultado.append([lista[i]] + perm)  # Agregamos el elemento fijo a cada permutación
            # Cada permutación obtenida del "resto" se une con el elemento "fijo" lista[i].
            # Ejemplo: Si i = 0, lista[i] = 1 y permutacionesFuntion([2,3]) devuelve [[2,3], [3,2]], entonces:
            # [1] + [2,3] → [1,2,3]
            # [1] + [3,2] → [1,3,2]
    return resultado
#y el resultado de este ejemplo es [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

# Ejemplo de uso:
elementos = [1, 2, 3]
print(permutacionesFuntion(elementos))

